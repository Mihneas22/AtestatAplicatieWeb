@page "/profile/{username}"
@using Application.Services
@using Domain.Models
@using WebUI.State
@inject IUserService userService;

<MyHeader></MyHeader>

<AuthorizeView>
    <Authorized>
        <div class="main-container-profile">
            @if (userData != null)
            {
                <div class="row-profile">
                    <p>@userData.Username</p>
                </div>

                <div class="row-profile">
                    @if (userData.MealsSaved!.Count == 0)
                    {
                        <div class="divText">
                            <p class="insideDivText">Meals 0</p>
                        </div>
                    }
                    else
                    {
                        <div class="divText">
                            <p class="insideDivText">@userData.MealsSaved</p>
                        </div>
                    }
                    <p>@userData.Friends!.Count friends</p>
                    <p>@userData.CreatedTime Time</p>
                </div>

                if(userFriends == false)
                {
                    <div @onclick="AddFriend" class="addFriendButton">
                        <p class="insideDivText">Add Friend</p>
                    </div>
                }
            }
        </div>
    </Authorized>

    <NotAuthorized>
        <div class="main-container-profile">
            @if (userData != null)
            {
                <div class="row-profile">
                    <p>@userData.Username</p>
                </div>

                <div class="row-profile">
                    @if (userData.MealsSaved!.Count == 0)
                    {
                        <div class="divText">
                            <p class="insideDivText">Meals 0</p>
                        </div>
                    }
                    else
                    {
                        <div class="divText">
                            <p class="insideDivText">@userData.MealsSaved</p>
                        </div>
                    }
                    <p>@userData.Friends!.Count friends</p>
                    <p>@userData.CreatedTime Time</p>
                </div>
            }
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter]
    public string? username { get; set; }

    private User? userData { get; set; }

    private bool userFriends { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        if(username != null)
        {
            var response = await userService.GetUserByNameService(new Application.DTOs.UserDTO.GetUserByName.GetUserByNameDTO { Username = username });

            if (response.Flag == true)
            {
                var customAuthStateProvider = (CustomAuthStateProvider)authProvider;
                var state = await customAuthStateProvider.GetAuthenticationStateAsync();
                userData = response.user;
                if (userData.Friends != null && userData.Friends.Count > 0 && state.User.Identity != null)
                {
                    foreach (var name in userData.Friends)
                    {
                        if (name == state.User.Identity.Name)
                        {
                            userFriends = true;
                            break;
                        }
                    }
                }
            }
        }
    }

    private async Task AddFriend()
    {
        var customAuthStateProvider = (CustomAuthStateProvider)authProvider;
        var state = await customAuthStateProvider.GetAuthenticationStateAsync();
        if(userData != null)
        {
            await userService.AddFriendService(new Application.DTOs.UserDTO.AddFriends.AddFriendDTO { NameWhoRecieved = userData!.Username!, NameWhoRequested = state.User.Identity!.Name! });
        }
    }
}
